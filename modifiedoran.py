# -*- coding: utf-8 -*-
"""modifiedoran.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16OtLshblvGEf7JMSKYt4kncjnkapeoNW
"""

import threading
import time
import random

class RadioUnit:
    def __init__(self, ru_id):
        self.ru_id = ru_id

    def send_signal(self, data):
        if random.random() < 0.05:  # 5% chance of packet loss
            print(f"[RU-{self.ru_id}] Packet lost while sending: {data}")
            return None
        latency = random.uniform(0.01, 0.1)  # simulate network delay
        time.sleep(latency)
        print(f"[RU-{self.ru_id}] Sending signal: {data}")
        return data

    def receive_signal(self, data):
        if data:
            latency = random.uniform(0.01, 0.05)
            time.sleep(latency)
            print(f"[RU-{self.ru_id}] Received signal: {data}")

class DistributedUnit:
    def __init__(self, du_id):
        self.du_id = du_id

    def process_signal(self, data):
        latency = random.uniform(0.02, 0.08)
        time.sleep(latency)
        processed_data = f"Processed({data})"
        print(f"[DU-{self.du_id}] Processing signal: {data} -> {processed_data}")
        return processed_data

class CentralUnit:
    def __init__(self, cu_id):
        self.cu_id = cu_id

    def manage_connection(self, user_data):
        latency = random.uniform(0.01, 0.03)
        time.sleep(latency)
        print(f"[CU-{self.cu_id}] Managing user session for: {user_data}")

class RIC:
    def __init__(self):
        self.policy = "Load Balancing"

    def apply_policy(self, component, data):
        print(f"[RIC] Applying {self.policy} policy on {component}: {data}")

# Simulate a single user session
def simulate_user_session(user_id, ru, du, cu, ric):
    user_data = f"UE{user_id}-data"
    ric.apply_policy("RU", user_data)

    signal = ru.send_signal(user_data)
    if signal is None:
        print(f"[UE{user_id}] Session aborted due to packet loss.")
        return

    processed = du.process_signal(signal)
    cu.manage_connection(processed)
    ru.receive_signal(f"ACK for {user_data}")
    print("-" * 50)

def simulate_o_ran_concurrent_users(user_count=100):
    ru = RadioUnit(ru_id=1)
    du = DistributedUnit(du_id=101)
    cu = CentralUnit(cu_id=201)
    ric = RIC()

    threads = []

    for user_id in range(1, user_count + 1):
        t = threading.Thread(target=simulate_user_session, args=(user_id, ru, du, cu, ric))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

if __name__ == "__main__":
    simulate_o_ran_concurrent_users(100)